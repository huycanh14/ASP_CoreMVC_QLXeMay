@{
    ViewData["Title"] = "Home Page";
    var Count = ViewData["Count"] as int[];
    ViewData["TitleHeader"] = "Thống kê chung";
}

<div class="row">
    <div class="col-lg-3 col-md-6 col-12">
        <div class="card card-sm-3">
            <div class="card-icon bg-primary">
                <i class="ion ion-person"></i>
            </div>
            <div class="card-wrap">
                <div class="card-header">
                    <h4>Tổng số nhân viên</h4>
                </div>
                <div class="card-body">
                    @Count[0]
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-12">
        <div class="card card-sm-3">
            <div class="card-icon bg-danger">
                <i class="ion ion-ios-paper-outline"></i>
            </div>
            <div class="card-wrap">
                <div class="card-header">
                    <h4>Tổng số Nhà cung cấp</h4>
                </div>
                <div class="card-body">
                    @Count[1]
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-12">
        <div class="card card-sm-3">
            <div class="card-icon bg-warning">
                <i class="ion ion-paper-airplane"></i>
            </div>
            <div class="card-wrap">
                <div class="card-header">
                    <h4>Tổng số khách hàng</h4>
                </div>
                <div class="card-body">
                    @Count[2]
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-12">
        <div class="card card-sm-3">
            <div class="card-icon bg-success">
                <i class="ion ion-record"></i>
            </div>
            <div class="card-wrap">
                <div class="card-header">
                    <h4>Tổng số loại xe máy</h4>
                </div>
                <div class="card-body">
                    @Count[3]
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-lg-12 col-md-12 col-12 col-sm-12">
        <div class="card">
            <div class="card-header">
                <div class="float-right">
                    <div class="btn-group">
                        <div class="btn active callReport" onclick="callReport('week')">Week</div>
                        <div class="btn callReport" onclick="callReport('month')">Month</div>
                        <div class="btn callReport" onclick="callReport('year')">Year</div>
                    </div>
                </div>
                <h4>Statistics</h4>
            </div>
            <div class="card-body">
                <canvas id="myChart" height="158"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts
{ 
<script>
    var ctx = document.getElementById("myChart").getContext('2d');
    var curr = new Date;
    var firstday = new Date(curr.setDate(curr.getDate() - curr.getDay())).toJSON().slice(0,10);
    var lastday = new Date(curr.setDate(curr.getDate() - curr.getDay()+6)).toJSON().slice(0,10);
    var callReport = (time) => {
        let btn = $(".callReport");
        console.log(btn);
        for (let i = 0; i < btn.length; i++) {
            console.log(btn[i])
            btn[i].classList.remove("active");
        }
            
            
        switch (time) {
            case 'week':
                btn[0].classList.add("active");
                firstday = new Date(curr.setDate(curr.getDate() - curr.getDay())).toJSON().slice(0, 10);
                lastday = new Date(curr.setDate(curr.getDate() - curr.getDay() + 6)).toJSON().slice(0, 10);
                break;
            case 'month':
                btn[1].classList.add("active");
                firstday = new Date(curr.getFullYear(), curr.getMonth(), 1).toJSON().slice(0, 10);;
                lastday = new Date(curr.getFullYear(), curr.getMonth() + 1, 0).toJSON().slice(0, 10);;
                break;
            default:
                btn[2].classList.add("active");
                firstday = "1/1/" + curr.getFullYear();
                lastday = "31/12/" + curr.getFullYear();
                break;
        }
        reportHDXuat(firstday, lastday);
    }
    var reportHDXuat = (firstday, lastday) => {
        //let data = 
        var url = '@Url.Action("Report", "HDXuat")?startTime=' + firstday + '&endTime=' + lastday;
        $.get(url, function (data) {
            var data = data.data;
            var MaXe = [];
            var SoLuong = [];
            for (let i = 0; i < data.length; i++) {
                MaXe.push(data[i].maXe);
                SoLuong.push(data[i].soLuong);
            }
            drawTempGraph(MaXe, SoLuong)
        });
    }

    var drawTempGraph = (MaXe, SoLuong) => {
        console.log(MaXe, SoLuong);
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: MaXe,
                datasets: [{
                    label: 'Statistics',
                    data: SoLuong,
                    borderWidth: 2,
                    backgroundColor: 'rgb(87,75,144)',
                    borderColor: 'rgb(87,75,144)',
                    borderWidth: 2.5,
                    pointBackgroundColor: '#ffffff',
                    pointRadius: 4
                }]
            },
            options: {
                legend: {
                    display: false
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            //stepSize: 150
                        }
                    }],
                    xAxes: [{
                        gridLines: {
                            display: false
                        }
                    }]
                },
            }
        });
    }
    reportHDXuat(firstday, lastday);
</script>
}